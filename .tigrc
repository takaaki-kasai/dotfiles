# 公式で用意されているVim風のプリセットを読み込む
source ~/.tigrc.vim

# generic なキーバインド
bind generic b none
bind generic cc !?sh -c "echo 'Commit...'; git commit"
bind generic ca !?sh -c "echo 'Amending previous commit...'; git commit --amend"
bind generic ap !?sh -c "echo 'Add patch...'; git add -p"
bind generic s none
bind generic d none
bind generic di view-diff
bind generic y none
bind generic yl view-stash
bind generic K none
bind generic H view-help
bind generic W none
bind generic w :set ignore-space = all
bind generic W :set ignore-space = no
bind generic r none
bind generic t none
bind generic m none
bind generic D none
bind generic F none

# main view のキーバインド
bind main C none
bind main t view-refs
bind main w view-tree
bind main G move-last-line
bind main F !sh -c "echo 'Fetching...'; git fetchall"
bind main P !?sh -c "echo 'Pushing...'; git pushall %(branch)"
bind main T !?git tag -a "%(prompt New tag name to create: )" %(commit)
bind main bb !@?git branch "%(prompt New branch name to create: )" %(commit)
bind main bc !@?git checkout -b "%(prompt New branch name to checkout: )" %(commit)
bind main bm !@?git branch -m %(branch) "%(prompt Rename branch to: )"
bind main co !@?git checkout %(branch)
bind main D !@?git branch -d %(branch)
bind main ! !@?git branch -D %(branch)
bind main mn !@?git merge --no-ff --no-edit %(branch)
bind main mm !?git merge --no-ff %(branch)
bind main mf !@?git merge --ff-only %(commit)
bind main BB !@?git rebase -p %(commit)
bind main BI !?sh -c "echo 'Starting interactive rebase...'; git rebase -i %(commit)"
bind main cp !@?git cherry-pick %(commit)
bind main ddu :!git diff -M100%
bind main dds :!git diff -M100% --cached
bind main ddp :!git diff -M100% %(commit)~..%(commit)
bind main ddh :!git diff -M100% %(commit)..HEAD
bind main ddw :!git diff -M100% %(commit)
bind main dlu :!git diff -M100% --name-status
bind main dls :!git diff -M100% --name-status --cached
bind main dlp :!git diff -M100% --name-status %(commit)~..%(commit)
bind main dlh :!git diff -M100% --name-status %(commit)..HEAD
bind main dlw :!git diff -M100% --name-status %(commit)
bind main dtu !git difftool -M100%
bind main dts !git difftool -M100% --cached
bind main dtp !git difftool -M100% %(commit)~..%(commit)
bind main dth !git difftool -M100% %(commit)..HEAD
bind main dtw !git difftool -M100% %(commit)
bind main rr !@?git reset %(commit)
bind main rs !@?git reset --soft %(commit)
bind main rh !@?git reset --hard %(commit)
bind main yy !@git stash
bind main yp !@git stash pop
bind main sh :!git show %(ref)
bind main st :!git status
bind main L !git l

# refs view のキーバインド
bind refs C none
bind refs D !@?git branch -d %(branch)
bind refs ! !@?git branch -D %(branch)
bind refs co !@?git checkout %(branch)
bind refs sh :!git show %(ref)

# status view のキーバインド
bind status ap !git add -p

# タイプ別のリファレンスの表示形式。スペース区切りで指定
# set reference-format = [branch] <tag> {remote} ~replace~
set reference-format = [branch] [->head] <tag> <(local-tag)> {remote} {=tracked-remote} ~replace~

# メインビューにコミットIDを出す
set main-view-id = yes,width=8

# コミットグラフのタイプを指定
set line-graphics = utf-8

# git diff のオプションを指定
set diff-options = -M100% --histogram --indent-heuristic
# set ignore-space = all # キーバインドでトグルできるようにするため、空白文字無視オプションはこちらで指定

# 行番号と表示する間隔
# set main-view-line-number = yes,interval=10
# set diff-view-line-number = yes,interval=1
# set stage-view-line-number = yes,interval=1
set pager-view-line-number = yes,interval=1

# コミットの並び順
# set commit-order = date

# 描画更新のタイミング
# set refresh-mode = after-command
